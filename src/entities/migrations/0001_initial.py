# Generated by Django 5.1.1 on 2024-10-07 18:44

import django.contrib.postgres.fields
import django.db.models.deletion
import entities.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ImageWithCaption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Image file to upload.', upload_to=entities.models.upload_to, validators=[entities.models.validate_image])),
                ('caption', models.CharField(blank=True, help_text='Caption for the image.', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the entity.', max_length=255)),
                ('entity_type', models.CharField(choices=[('Divinity', 'Divinity'), ('Hero', 'Hero'), ('Mythical Creature', 'Mythical Creature')], help_text='Type of entity.', max_length=20)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date the entity was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='Date the entity was last modified.')),
                ('country_of_origin', models.CharField(blank=True, help_text='Country of origin of the entity.', max_length=100, null=True)),
                ('ethnicity', models.CharField(blank=True, help_text='Group of people the entity is associated with.', max_length=100, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Androgynous', 'Androgynous'), ('Spirit', 'Spirit'), ('Element', 'Element')], help_text='Gender of the entity.', max_length=15, null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created the entity.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, help_text='Images of the entity.', to='entities.imagewithcaption')),
            ],
            options={
                'unique_together': {('name', 'entity_type')},
            },
        ),
        migrations.CreateModel(
            name='DivinityDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cultural_role', models.CharField(help_text="Cultural role of the divinity, e.g., 'God of thunder'.", max_length=100)),
                ('pantheon', models.CharField(blank=True, help_text='The pantheon to which the divinity belongs.', max_length=100, null=True)),
                ('alignment', models.CharField(blank=True, help_text='Moral or ethical alignment of the divinity.', max_length=100, null=True)),
                ('domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Main domains associated with the divinity.', size=None)),
                ('main_symbols', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Main symbols associated with the divinity.', size=None)),
                ('characteristics', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Main traits or aspects of the mythological personality.', size=None)),
                ('manifestations', models.CharField(blank=True, help_text='Descriptions of the forms the divinity can take in mythological accounts.', max_length=255, null=True)),
                ('symbolic_animals', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Animals symbolically linked to the divinity.', size=None)),
                ('power_objects', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Mythically significant objects associated with the divinity.', size=None)),
                ('consorts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text="Name(s) of the divinity's consort(s) or partner(s), if applicable.", size=None)),
                ('entity', models.OneToOneField(limit_choices_to={'entity_type': 'Divinity'}, on_delete=django.db.models.deletion.CASCADE, related_name='divinity_details', to='entities.entity')),
            ],
        ),
        migrations.CreateModel(
            name='HeroDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titles', models.CharField(blank=True, help_text='Honorific titles or alternative names of the hero.', max_length=255, null=True)),
                ('achievements', models.TextField(blank=True, help_text='Notable achievements or exploits of the hero.', null=True)),
                ('enemies', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Enemies or adversaries of the hero in myths.', size=None)),
                ('allies', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Allies or companions of the hero in myths.', size=None)),
                ('entity', models.OneToOneField(limit_choices_to={'entity_type': 'Hero'}, on_delete=django.db.models.deletion.CASCADE, related_name='hero_details', to='entities.entity')),
            ],
        ),
        migrations.CreateModel(
            name='MythicalCreatureDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habitat', models.CharField(help_text='Natural or mythological habitat of the creature.', max_length=255)),
                ('diet', models.CharField(blank=True, help_text='Diet of the mythical creature.', max_length=255, null=True)),
                ('size', models.CharField(blank=True, help_text='Typical size or dimensions of the creature.', max_length=100, null=True)),
                ('weaknesses', models.TextField(blank=True, help_text='Weaknesses or vulnerabilities of the creature.', null=True)),
                ('strengths', models.TextField(blank=True, help_text='Strengths or special abilities of the creature.', null=True)),
                ('entity', models.OneToOneField(limit_choices_to={'entity_type': 'Mythical Creature'}, on_delete=django.db.models.deletion.CASCADE, related_name='creature_details', to='entities.entity')),
            ],
        ),
    ]
